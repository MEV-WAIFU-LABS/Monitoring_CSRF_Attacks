===========================================================
= Monitoring Cross-site Request Forgery Attacks (MonCSRF)
         Stony Brook University, January/2012.
===========================================================


== Introduction


MonCSRF is designed to detect requests in a web server that may result on Cross-site Request Forgery (CSRF) attacks [1] [2] [3] [4] [5].

MonCSRF parses a given log file derived from a web server with DIVA [6] and verifies whether (and how) the requests in this file had the state of the system changed (named potential unsafe requests).


MonCSRF is written in Ruby 1.9.2 and Ragel [7][8].



== Strategies



MonCSRF contains two different strategies for parsing a log file from DIVA.


=== Parsing by Regular Expressions (REGEXP)


The class representing this strategy is located at:

/lib/log_parser/strategies/sql/regexp.rb


The default running does not use this strategy.


=== Parsing into an Abstract Syntact Tree (AST)

The class representing this strategy is located at:

/lib/log_parser/strategies/sql/ragel.rl


One can generates the .rb file by:

$ ragel -R ragel.rl

Ragel is a state machine compiler and parse generator.


== Whitelisting

Every time one runs MonCSRF, every the potential unsafe requests will be compared to a whitelist. In the case which the program finds a previous similar whitelisted request (i.e., with same syntactic structure), the new request is automatically marked as safe. If the new request is not in the whitelist, the program will generate an alert and ask about the safety of it.


The whitelist file can be inspected at:


/white_list



== Tree Struture of the Files

├── bin

│   └── parser.rb

├── lib

│   ├── log_parser

│   │   ├── log_entry.rb

│   │   ├── log.rb

│   │   ├── sql_info.rb

│   │   ├── strategies

│   │   │   └── sql

│   │   │       ├── base.rb

│   │   │       ├── ragel.dot

│   │   │       ├── ragel.rb

│   │   │       ├── ragel.rl

│   │   │       ├── README_strategies

│   │   │       └── regexp.rb

│   │   └── white_list.rb

│   ├── log_parser.rb

│   └── runtime.rb



== Testings (For Developers)

MonCSRF was written using testings:

$ gem install bundler

$ bundle

$ rspec spec


├── spec

│   ├── fixtures

│   │   ├── log

│   │   ├── white_list

│   ├── integration

│   │   └── runtime_spec.rb

│   ├── spec_helper.rb

│   ├── strategies

│   │   └── sql

│   │       ├── ragel_spec.rb

│   │       └── regext_spec.rb

│   ├── support

│   │   └── shared_example_strategy_sql.rb

│   └── unit

│       ├── log_entry_spec.rb

│       ├── log_spec.rb

│       ├── sql_info.rb

│       └── white_list_spec.rb




== Running MonCSRF

To run MonCSRF, one needs to give the name of the log file:

$ bin/parser.rb PATH_TO_THE_LOG


To run monCSRF using the default logs/log file:

$./run.sh

To test benchmark:

$./benchmark.sh



== Documentation
The complete documentation of monCSRF in HTML is at:

/doc/README_rdoc.html


This documentation was generated using RDoc[9] and can be updated by:

$ bundle

$ rdoc



=== Developers

Marina von Steinkirch, steinkirch at gmail.com

Riccardo Pelizzi, r.pelizzi at gmail.com



=== References
[1] CWE/SANS Top 25 Most Dangerous Software Errors, http://cwe.mitre.org/top25/index.html.
[2] Jovanovic, N., Kirda, E., & Kruegel, C.,  Preventing cross site request forgery attacks, 2007.
[3] Barth, A., Jackson, C., &  Mitchell, J.C.,  Robust Defenses for Cross-Site Request Forgery, CCS  2008.
[4] R. Pelizzi & R. Sekar, A Server- and Browser- Transparent CSRF Defense for Web 2.0., 2011.
[5] Xu, W., Bhatkar, E. & Sekar, R.,  Taint-enhanced policy enforcement, 2006.
[6] R. Sekar, An Efficient Black-Box Technique for Defeating Web Application Attacks, 2008.
[7] RVM Sources, http://beginrescueend.com/.
[8] Ragel Sources, http://www.complang.org/ragel.
[9] RDoc Sources, http://rdoc.sourceforge.net/.
